#include<bits/stdc++.h>
using namespace std;
int V = 5;
vector<int> adj[5];
void addEdge(int u,int v){
	adj[u].push_back(v);
}
bool isCyclic_util(int v,bool visited[],bool recur[]){
	if(visited[v]==false){
		visited[v] = true;
		recur[v] = true;
		for(auto it=adj[v].begin();it!=adj[v].end();it++){
			if(!visited[*it] && isCyclic_util(*it,visited,recur)){
				return true;
			}
			else if(recur[*it]){
				return true;
			}
		}	
	}
	recur[v] = false;
	return false;
}
bool isCyclic(){
	bool *visited = new bool[V];
	bool *recur = new bool[V];
	memset(visited,false,sizeof(visited));
	memset(recur,false,sizeof(recur));
	for(int i=0;i<V;i++){
		if(isCyclic_util(i,visited,recur)){
			return true;
		}
	}
	return false;
}
int main(){
	addEdge(0,1);
	addEdge(0,2);
	addEdge(1,2);
	addEdge(2,0);
	addEdge(2,3);
	addEdge(3,3);
	if(isCyclic()){
		cout<<"Graph contains cycle: ";
	}
	else{
		cout<<"Graph doesn't contain cycle: ";
	}
	return 0;
}
